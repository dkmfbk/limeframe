#!/bin/bash
echo "vocabularyStats"
echo
echo "Analyzes generated PreMOn RDF and computes statistics on vocabulary usage, identifying these errors:"
echo "* classes and properties used (in ABox) but not declared (in TBox)"
echo "* object properties (in TBox) used as datatype properties (in ABox)"
echo "* datatype properties (in TBox) used as object properties (in ABox)"
echo "* functional properties (in TBox) used in a non-functional way (in ABox)"
echo "* inverse functional properties (in TBox) used in a non-inverse functional way (in ABox)"
echo
echo "The script must be run (without parameters) in the folder where the PreMOn RDF files generated by"
echo "Premonitor are located. The first run has to compute specific statistics (file vocabularyStats.tql.gz"
echo "from the all-inf dataset and this may take a while (2 minutes); these statistics are cached and reused"
echo "if the script is run echo again. Identified class and property errors are reported on stdout. Two files"
echo "vocabularyStats.classes.tsv and vocabularyStats.properties.tsv are generated with complete statistics"
echo "and validation status (OK, ERROR) for each class and property used in PreMOn ABox. This script requires"
echo "rdfpro installed and available on system PATH, and enough space on system /tmp folder"
echo

set -e

statistics_file=vocabularyStats.tql.gz
properties_file=vocabularyStats.properties.tsv
classes_file=vocabularyStats.classes.tsv

if [ ! -f $statistics_file ]; then
    echo "Generating statistics $statistics_file ..."
    rdfpro @read *-all-inf.tql.gz @transform "=c <sesame:nil>" @stats @read *-tbox-inf.tql.gz @write $statistics_file
fi

echo "Generating report $classes_file ..."
rdfpro @read $statistics_file @tsv -q '
    SELECT ?class ?entities ?triples ?typeTriples ?avgProps ?definedAs ?valid
    WHERE {
        [] void:class ?class;
           void:entities ?entities; 
           void:triples ?triples;
           <http://rdfpro.fbk.eu/ontologies/voidx#typeTriples> ?typeTriples;
           <http://rdfpro.fbk.eu/ontologies/voidx#averageProperties> ?avgProps.
        BIND (IF(EXISTS { ?class a owl:Class }, "C", "-") AS ?definedAs )
        BIND (IF(?definedAs = "C", "OK", "ERROR") AS ?valid)
    }
    ORDER BY ?class' .temp.tsv
echo $'?class\t?entities\t?triples\t?typeTriples\t?avgProps\t?definedAs\t?valid' > $classes_file
cat .temp.tsv >> $classes_file
rm .temp.tsv

echo "Generating report $properties_file ..."
rdfpro @read $statistics_file @tsv -q '
    SELECT ?property ?triples ?subjects ?objects ?definedAs ?usedAs ?definedFunc ?usedFunc ?definedInvFunc ?usedInvFunc ?valid
    WHERE {
        [] void:property ?property;
           void:triples ?triples; 
           void:distinctSubjects ?subjects;
           void:distinctObjects ?objects.
        BIND (IF(EXISTS { ?property a owl:DatatypeProperty }, "DP",
              IF(EXISTS { ?property a owl:ObjectProperty }, "OP",
              IF(EXISTS { ?property a owl:AnnotationProperty }, "AP", 
              IF(EXISTS { ?property a rdf:Property }, "P", "-")))) AS ?definedAs)
        BIND (IF(EXISTS { ?property <http://rdfpro.fbk.eu/ontologies/voidx#type> owl:DatatypeProperty }, "DP",
              IF(EXISTS { ?property <http://rdfpro.fbk.eu/ontologies/voidx#type> owl:ObjectProperty }, "OP",
              IF(EXISTS { ?property <http://rdfpro.fbk.eu/ontologies/voidx#type> owl:AnnotationProperty }, "AP", 
              IF(EXISTS { ?property <http://rdfpro.fbk.eu/ontologies/voidx#type> rdf:Property }, "AP", "-")))) AS ?usedAs)
        BIND (IF(EXISTS { ?property a owl:FunctionalProperty }, "F", "-") AS ?definedFunc)
        BIND (IF(EXISTS { ?property <http://rdfpro.fbk.eu/ontologies/voidx#type> owl:FunctionalProperty }, "F", "-") AS ?usedFunc)
        BIND (IF(EXISTS { ?property a owl:InverseFunctionalProperty }, "I", "-") AS ?definedInvFunc)
        BIND (IF(EXISTS { ?property <http://rdfpro.fbk.eu/ontologies/voidx#type> owl:InverseFunctionalProperty }, "I", "-") AS ?usedInvFunc)
        BIND (IF((?definedAs = "P" || ?definedAs = "AP" || ?definedAs = ?usedAs)
                 && (?definedFunc = "-" || ?definedFunc = ?usedFunc)
                 && (?definedInvFunc = "-" || ?definedInvFunc = ?usedInvFunc), "OK", "ERROR") AS ?valid)
    }
    ORDER BY ?property' .temp.tsv
echo $'?property\t?triples\t?subjects\t?objects\t?definedAs\t?usedAs\t?definedFunc\t?usedFunc\t?definedInvFunc\t?usedInvFunc\t?valid' > $properties_file
cat .temp.tsv >> $properties_file
rm .temp.tsv

if [[ $(grep 'ERROR$' $classes_file) ]]; then
    echo "Class errors: "
    sed '1p;/ERROR$/!d' $classes_file | column -t
    echo
fi

if [[ $(grep 'ERROR$' $properties_file) ]]; then
    echo "Property errors:"
    sed '1p;/ERROR$/!d' $properties_file | column -t
    echo
fi
